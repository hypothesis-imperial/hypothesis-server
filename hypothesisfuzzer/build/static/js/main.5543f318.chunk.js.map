{"version":3,"sources":["components/FalsifyTest.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","props","variableList","variables","map","variable","index","react_default","a","createElement","FalsifyTest_Variable","key","v_name","v_value","Variable","className","FalsifyTest","errorList","errors","reactstrap_es","FalsifyTest_Error","test_name","App","state","falsifyTestCase","_this2","this","fetch","then","result","json","console","log","setState","_this$state$falsifyTe","src_components_FalsifyTest","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAyBMA,SAAQ,SAACC,GACb,IAAMC,EAAeD,EAAME,UAAUC,IAAI,SAACC,EAAUC,GAClD,OAAOC,EAAAC,EAAAC,cAACC,EAAD,CAAUC,IAAKL,EAAOM,OAAQP,EAASO,OAAQC,QAASR,EAASQ,YAE1E,OACEN,EAAAC,EAAAC,cAAA,WACGP,KAKDY,EAAW,SAACb,GAChB,OACEM,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACbR,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAKR,EAAMW,SAEbL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAKR,EAAMY,aAONG,EAjDK,SAACf,GACnB,IAAMgB,EAAYhB,EAAMiB,OAAOd,IAAI,SAACD,EAAWG,GAC7C,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMJ,UAAU,SACdR,EAAAC,EAAAC,cAACU,EAAA,EAAD,cAAkBb,GAClBC,EAAAC,EAAAC,cAACW,EAAD,CAAOT,IAAKL,EAAOH,UAAWA,QAKtC,OACEI,EAAAC,EAAAC,cAAA,OAAKM,UAAU,QACbR,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAWJ,UAAU,YAArB,cAA4Cd,EAAMoB,WACjDJ,KCcMK,oNA5BbC,MAAQ,CACNC,gBAAiB,CACfH,UAAW,GACXH,OAAQ,wFAIQ,IAAAO,EAAAC,KAElBC,MADY,wEAEXC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAC,GACJE,QAAQC,IAAIH,GACZJ,EAAKQ,SAAS,CAACT,gBAAiBK,uCAK3B,IAAAK,EACuBR,KAAKH,MAAMC,gBAAjCH,EADDa,EACCb,UAAWH,EADZgB,EACYhB,OACnB,OACEX,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAC0B,EAAD,CAAad,UAAWA,EAAWH,OAAQA,YAvBjCkB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.5543f318.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardTitle } from 'reactstrap'\nimport './FalsifyTest.css'\n\nconst FalsifyTest = (props) => {\n  const errorList = props.errors.map((variables, index) => {\n    return (\n      <div>\n        <Card className=\"Error\">\n          <CardTitle>Error {index}</CardTitle>\n          <Error key={index} variables={variables} />\n        </Card>\n      </div>\n    )\n  })\n  return (\n    <div className=\"Test\">\n      <Card>\n        <CardTitle className=\"TestName\">Test Name: {props.test_name}</CardTitle>\n        {errorList}\n      </Card>\n    </div>\n  )\n}\n\nconst Error = (props) => {\n  const variableList = props.variables.map((variable, index) => {\n    return <Variable key={index} v_name={variable.v_name} v_value={variable.v_value} />\n  })\n  return (\n    <div>\n      {variableList}\n    </div>\n  )\n}\n\nconst Variable = (props) => {\n  return (\n    <div className=\"Variable\">\n      <table>\n        <tr>\n          <td>Variable Name: </td>\n          <td>{props.v_name}</td>\n        </tr>\n        <tr>\n          <td>Variable Value: </td>\n          <td>{props.v_value}</td>\n        </tr>\n      </table>\n    </div>\n  )\n}\n\nexport default FalsifyTest\n","import React, { Component } from 'react';\nimport FalsifyTest from './components/FalsifyTest';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    falsifyTestCase: {\n      test_name: \"\",\n      errors: []\n    }\n  };\n\n  componentDidMount() {\n    const url = \"http://ec2-18-130-116-158.eu-west-2.compute.amazonaws.com/get_errors\";\n    fetch(url)\n    .then(result => result.json())\n    .then(result => {\n      console.log(result)\n      this.setState({falsifyTestCase: result})\n    });\n  }\n\n\n  render() {\n    const { test_name, errors } = this.state.falsifyTestCase;\n    return (\n      <div className=\"App\">\n        <FalsifyTest test_name={test_name} errors={errors} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}